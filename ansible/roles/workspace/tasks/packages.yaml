---
- name: Packages | Install basic packages
  ansible.builtin.apt:
    pkg: "{{ apt_packages }}"
    state: present
    update_cache: true
    install_recommends: false
  tags: [install-packages]

######################################################################
# Golang
######################################################################
- name: Registers | Check Golang directory exists
  ansible.builtin.stat:
    path: "{{ golang_install_dir }}"
  register: golang_check
  tags: [install-golang]

- name: Packages | Install Go
  block:
    - name: Packages | Download and install Go
      ansible.builtin.unarchive:
        src: "{{ golang_download_url }}"
        dest: /tmp
        remote_src: true

    - name: Paths | Copy versioned directory
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/go/
        dest: "{{ golang_install_dir }}"

    - name: Paths | Remove old copy
      ansible.builtin.file:
        path: /tmp/go
        state: absent
  when: not golang_check.stat.exists
  tags: [install-golang]

- name: Paths | Create go executables symlinks
  ansible.builtin.file:
    src: "{{ golang_install_dir }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    owner: root
    group: root
  loop:
    - go
    - gofmt
  tags: [install-golang]

- name: Registers | Check golangci-lint executable exists
  ansible.builtin.stat:
    path: /usr/local/bin/golangci-lint
  register: golangci_lint_check
  tags: [install-golang]

- name: Packages | Install golangci-lint
  block:
    - name: Packages | Download and install golangci-lint
      ansible.builtin.unarchive:
        src: "{{ golangci_lint_download_url }}"
        dest: /tmp
        remote_src: true

    - name: Paths | Copy versioned directory
      ansible.builtin.copy:
        remote_src: true
        src: "/tmp/golangci-lint-{{ golangci_lint_version }}-linux-amd64/golangci-lint"
        dest: /usr/local/bin/golangci-lint

    - name: Paths | Remove old copy
      ansible.builtin.file:
        path: /tmp/golangci-lint
        state: absent
  when: not golangci_lint_check.stat.exists
  tags: [install-golang]

- name: Files | Add +x permissions on golangci-lint
  ansible.builtin.file:
    dest: /usr/local/bin/golangci-lint
    owner: root
    group: root
    mode: '0755'
  tags: [install-golang]

######################################################################
# GoLand
######################################################################
- name: Registers | Check GoLand directory exists
  ansible.builtin.stat:
    path: "{{ goland_install_dir }}"
  register: goland_check
  tags: [install-goland]

- name: Packages | Install GoLand
  block:
    - name: Packages | Download and install GoLand
      ansible.builtin.unarchive:
        src: "{{ goland_download_url }}"
        dest: "{{ non_apt_install_root }}"
        remote_src: true
  when: not goland_check.stat.exists
  tags: [install-goland]

- name: Paths | Create 'goland' symlink
  ansible.builtin.file:
    src: "{{ goland_install_dir }}/bin/goland.sh"
    dest: /usr/bin/goland
    state: link
    owner: root
    group: root
  tags: [install-goland]

######################################################################
# Docker and Docker-compose
######################################################################
- name: Keys | Add docker's apt repository GPG key
  ansible.builtin.apt_key:
    url: "{{ docker_distfiles_url }}/gpg"
    keyring: "{{ apt_repo_keyfile_path }}"
    state: present
  tags: [install-docker]

- name: Repositories | Add docker's apt repository
  ansible.builtin.apt_repository:
    repo: "{{ apt_repo_source }}"
    state: present
  tags: [install-docker]

- name: Packages | Install docker packages
  ansible.builtin.apt:
    pkg: "{{ apt_docker_packages }}"
    state: present
    update_cache: true
    install_recommends: false
  notify: start docker
  tags: [install-docker]

- name: Registers | Check docker-compose executable exists
  ansible.builtin.stat:
    path: /usr/local/bin/docker-compose
  register: docker_compose_check
  tags: [install-docker]

- name: Packages | Install docker-compose
  block:
    - name: Packages | Download and install docker-compose
      ansible.builtin.get_url:
        url: "{{ docker_compose_url }}"
        dest: /usr/local/bin/docker-compose
        owner: root
        group: root
        mode: '0755'
  when: not docker_compose_check.stat.exists
  tags: [install-docker]

######################################################################
# Vagrant and VirtualBox
######################################################################

######################################################################
# Telegram
######################################################################
- name: Registers | Check Telegram executable exists
  ansible.builtin.stat:
    path: "{{ telegram_install_dir }}/Telegram"
  register: telegram_check
  tags: [install-telegram]

- name: Packages | Install Telegram
  block:
    - name: Packages | Download and install Telegram
      ansible.builtin.unarchive:
        src: "{{ telegram_download_url }}"
        dest: /tmp
        remote_src: true

    - name: Paths | Copy versioned directory
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/Telegram/
        dest: "{{ telegram_install_dir }}"

    - name: Paths | Remove old copy
      ansible.builtin.file:
        path: /tmp/Telegram
        state: absent
  when: not telegram_check.stat.exists
  tags: [install-telegram]

- name: Paths | Create 'telegram' symlink
  ansible.builtin.file:
    src: "{{ telegram_install_dir }}/Telegram"
    dest: /usr/bin/telegram
    state: link
    owner: root
    group: root
  tags: [install-telegram]

#######################################################################
# Yakuake
######################################################################
- name: Configs | Create yakuake config from template
  ansible.builtin.copy:
    src: yakuakerc
    dest: "{{ user_home }}/.config/yakuakerc"
    owner: "{{ user_account }}"
    group: "{{ user_account }}"
    mode: '0600'
  tags: [yakuake]

#######################################################################
# Krusader
######################################################################
- name: Configs | Create krusader config from template
  ansible.builtin.template:
    src: krusaderrc.j2
    dest: "{{ user_home }}/.config/krusaderrc"
    owner: "{{ user_account }}"
    group: "{{ user_account }}"
    mode: '0600'
  tags: [krusader]
